name: ci-linux

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        build-type: [Release, RelWithDebInfo, MinSizeRel, Debug]
        cmake-version: [3.15.x, 3.16.x, 3.17.x, 3.18.x, 3.19.x, 3.20.x, 3.21.x]
        compiler: [gcc, clang]
        generator: [Unix Makefiles, Ninja]

    name: "Build: ${{matrix.os}} • ${{matrix.build-type}} • ${{matrix.cmake-version}} • ${{matrix.compiler}} • ${{matrix.generator}}"
    runs-on: ${{matrix.os}}

    steps:
      - name: Setup repository
        uses: actions/checkout@v2

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.10
        with:
          cmake-version: ${{matrix.cmake-version}}

      # Configure for GCC
      - name: Configure GNU/GCC as C/C++ compiler
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          echo "Choosing GNU/GCC as C/C++ compiler"
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV

      # Configure for Clang
      - name: Configure LLVM/Clang as compiler
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          echo "Choosing LLVM/Clang as compiler"
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      # Configure the internal build system
      - name: Configure ${{matrix.generator}} as internal build-system
        run: echo "CMAKE_GENERATOR=${{matrix.generator}}" >> $GITHUB_ENV

      - name: Run examples
        run: |
          chmod +x scripts/run_examples.sh
          bash scripts/run_examples.sh ${{matrix.build-type}}
